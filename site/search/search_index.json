{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"parcel \u00b6 Interact with parcel from R, supports npm and yarn . Parcel.js is a nice alternative to webpack . There is already the packer package to interact with webpack. Given the complexity of webpack the package does much of the work for the developer. However, the simplicity of parcel.js allows a different approach: it\u2019s much less hands-on because, unlike webpack, the learning curve of parcel is very approachable.","title":"Home"},{"location":"#parcel","text":"Interact with parcel from R, supports npm and yarn . Parcel.js is a nice alternative to webpack . There is already the packer package to interact with webpack. Given the complexity of webpack the package does much of the work for the developer. However, the simplicity of parcel.js allows a different approach: it\u2019s much less hands-on because, unlike webpack, the learning curve of parcel is very approachable.","title":"parcel"},{"location":"engine/","text":"Engine \u00b6 Parcel supports both npm and yarn , this is supported by R packages of the same name: npm yarn The underlying engine (and package) used can be defined with set_engine . 1 set_engine ( \"yarn\" ) If the engine is not set then every function will default to using npm.","title":"Engine"},{"location":"engine/#engine","text":"Parcel supports both npm and yarn , this is supported by R packages of the same name: npm yarn The underlying engine (and package) used can be defined with set_engine . 1 set_engine ( \"yarn\" ) If the engine is not set then every function will default to using npm.","title":"Engine"},{"location":"example/","text":"Example \u00b6 A central function to parcel is scaffold , it lets you set up an R project to use parcel from the root of its directory. For instance, create a package. 1 usethis :: create_package ( 'testParcel' ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u2714 Creating 'testParcel/' \u2714 Setting active project to '/Packages/testParcel' \u2714 Creating 'R/' \u2714 Writing 'DESCRIPTION' Package: testParcel Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R (parsed): * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID) Description: What the package does (one paragraph). License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a license Encoding: UTF-8 LazyData: true Roxygen: list(markdown = TRUE) RoxygenNote: 7.1.1 \u2714 Writing 'NAMESPACE' \u2714 Setting active project to '<no active project>' Then scaffold the project. 1 parcel :: scaffold () 1 2 3 4 5 6 7 8 9 10 11 \u2500\u2500 Scaffolding \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Initialised npm \u2714 Installed `parcel-bundler` \u2139 Adding files to '.gitignore' \u2714 Setting active project to '/Packages/testParcel' \u2714 Adding 'node_modules/' to '.gitignore' \u2139 Adding files to '.Rbuildignore' \u2714 Adding '^node_modules$' to '.Rbuildignore' \u2714 Adding '^package\\\\.json$' to '.Rbuildignore' \u2714 Adding '^package-lock\\\\.json$' to '.Rbuildignore' \u2714 Parcel project set up One can then write JavaScript in the srcjs directory, then run. 1 parcel :: build ()","title":"Example"},{"location":"example/#example","text":"A central function to parcel is scaffold , it lets you set up an R project to use parcel from the root of its directory. For instance, create a package. 1 usethis :: create_package ( 'testParcel' ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u2714 Creating 'testParcel/' \u2714 Setting active project to '/Packages/testParcel' \u2714 Creating 'R/' \u2714 Writing 'DESCRIPTION' Package: testParcel Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R (parsed): * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID) Description: What the package does (one paragraph). License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a license Encoding: UTF-8 LazyData: true Roxygen: list(markdown = TRUE) RoxygenNote: 7.1.1 \u2714 Writing 'NAMESPACE' \u2714 Setting active project to '<no active project>' Then scaffold the project. 1 parcel :: scaffold () 1 2 3 4 5 6 7 8 9 10 11 \u2500\u2500 Scaffolding \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Initialised npm \u2714 Installed `parcel-bundler` \u2139 Adding files to '.gitignore' \u2714 Setting active project to '/Packages/testParcel' \u2714 Adding 'node_modules/' to '.gitignore' \u2139 Adding files to '.Rbuildignore' \u2714 Adding '^node_modules$' to '.Rbuildignore' \u2714 Adding '^package\\\\.json$' to '.Rbuildignore' \u2714 Adding '^package-lock\\\\.json$' to '.Rbuildignore' \u2714 Parcel project set up One can then write JavaScript in the srcjs directory, then run. 1 parcel :: build ()","title":"Example"},{"location":"installation/","text":"Installation \u00b6 Parcel is an R package whcih can thus simply be installed from Github with remotes: 1 2 # install.packages(\"remotes\") remotes :: install_github ( \"JohnCoene/parcel\" ) Then one must also install one of the two engines, either npm or yarn. Make sure you have npm installed. Npm \u00b6 If you have npm installed then only the npm package is required. 1 2 # install.packages(\"remotes\") remotes :: install_github ( \"JohnCoene/npm\" ) Yarn \u00b6 If you have npm installed, get the yarn package. 1 remotes :: install_github ( \"JohnCoene/yarn\" ) Then, install yarn. 1 yarn :: install_yarn ()","title":"Installation"},{"location":"installation/#installation","text":"Parcel is an R package whcih can thus simply be installed from Github with remotes: 1 2 # install.packages(\"remotes\") remotes :: install_github ( \"JohnCoene/parcel\" ) Then one must also install one of the two engines, either npm or yarn. Make sure you have npm installed.","title":"Installation"},{"location":"installation/#npm","text":"If you have npm installed then only the npm package is required. 1 2 # install.packages(\"remotes\") remotes :: install_github ( \"JohnCoene/npm\" )","title":"Npm"},{"location":"installation/#yarn","text":"If you have npm installed, get the yarn package. 1 remotes :: install_github ( \"JohnCoene/yarn\" ) Then, install yarn. 1 yarn :: install_yarn ()","title":"Yarn"}]}